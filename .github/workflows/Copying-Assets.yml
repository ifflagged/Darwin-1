name: Mirror Release Assets

on:
  schedule:
    - cron: '5,30 * * * *'
  workflow_dispatch:

jobs:
  Downloading_Assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Set repository lists
        run: |
          REPOS=(
            "NSRingo/WeatherKit"
            "NSRingo/GeoServices"
            "NSRingo/Siri"
            "NSRingo/TV"
            "NSRingo/News"
            "NSRingo/Testflight"
            "BiliUniverse/Enhanced"
            "BiliUniverse/Global"
            "BiliUniverse/Redirect"
            "BiliUniverse/ADBlock"
            "BiliUniverse/Roaming"
            "DualSubs/Universal"
            "DualSubs/YouTube"
            "DualSubs/Spotify"
            "DualSubs/Netflix"
            "DualSubs/AddOn"
            "VirgilClyne/GetSomeFries"
          )
          echo "REPOS<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${REPOS[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat-openbsd

      - name: Wait for Docker services to be ready
        run: |
          echo "Waiting for Docker services to be ready..."
          for i in {1..10}; do
            nc -z localhost 9100 && nc -z localhost 9101 && break
            sleep 10
          done

      - name: Download assets from releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSETS_CHANGED=false
          UPDATED_FILES=()
          SGMODULE_URLS=()  # For files that need srmodule conversion
          PLUGIN_URLS=()

          # Initialize No_link_provided_for_srmodule.txt
          > No_link_provided_for_srmodule.txt

          while IFS= read -r REPO; do
            echo "Processing repository: $REPO"

            # Special handling for VirgilClyne/GetSomeFries repository
            if [[ "$REPO" == "VirgilClyne/GetSomeFries" ]]; then
              # Get sgmodule and plugin folder contents
              SGMODULE_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/contents/sgmodule")
              PLUGIN_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/contents/plugin")

              # Process sgmodule files
              for ASSET in $(echo "$SGMODULE_FILES" | jq -r '.[] | select(.type=="file") | .download_url'); do
                echo "Found sgmodule file: $ASSET"
                FILENAME=$(basename "$ASSET")
                OUTPUT_DIR="./Modules/Surge/VirgilClyne"
                mkdir -p "$OUTPUT_DIR"
                OUTPUT_FILE="$OUTPUT_DIR/$FILENAME"

                echo "Downloading sgmodule file: $FILENAME"
                curl -L -H "Authorization: token $GITHUB_TOKEN" -o "$OUTPUT_FILE.tmp" "$ASSET"

                if [ -f "$OUTPUT_FILE.tmp" ]; then
                  mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                  UPDATED_FILES+=("$FILENAME")
                  ASSETS_CHANGED=true
                  
                  # Add to conversion list for srmodule
                  echo "$ASSET" >> No_link_provided_for_srmodule.txt
                else
                  echo "Failed to download $FILENAME"
                fi
              done

              # Process plugin files
              for ASSET in $(echo "$PLUGIN_FILES" | jq -r '.[] | select(.type=="file") | .download_url'); do
                echo "Found plugin file: $ASSET"
                FILENAME=$(basename "$ASSET")
                OUTPUT_DIR="./Modules/Loon/VirgilClyne"
                mkdir -p "$OUTPUT_DIR"
                OUTPUT_FILE="$OUTPUT_DIR/$FILENAME"

                echo "Downloading plugin file: $FILENAME"
                curl -L -H "Authorization: token $GITHUB_TOKEN" -o "$OUTPUT_FILE.tmp" "$ASSET"

                if [ -f "$OUTPUT_FILE.tmp" ]; then
                  mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                  UPDATED_FILES+=("$FILENAME")
                  ASSETS_CHANGED=true
                else
                  echo "Failed to download $FILENAME"
                fi
              done
            else
              # Get latest release for other repositories
              RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/latest")
              if [ -z "$RELEASE" ] || [ "$RELEASE" == "null" ] || [ "$(echo "$RELEASE" | jq -r '.message')" = "Not Found" ]; then
                echo "Release not found for $REPO, skipping."
                continue
              fi

              # Process each asset
              ASSETS=$(echo "$RELEASE" | jq -c '.assets[]')
              while IFS= read -r ASSET; do
                ASSET_NAME=$(echo "$ASSET" | jq -r '.name')
                ASSET_URL=$(echo "$ASSET" | jq -r '.url')
                ASSET_DOWNLOAD_URL=$(echo "$ASSET" | jq -r '.browser_download_url')
                EXTENSION="${ASSET_NAME##*.}"

                echo "Found asset: $ASSET_NAME"

                # Determine output directory based on file type and repo
                case "$EXTENSION" in
                  "sgmodule")
                    OUTPUT_DIR="./Modules/Surge/${REPO%%/*}"
                    # Add to conversion list if no corresponding srmodule exists
                    if ! grep -q "\.srmodule" <<< "$ASSETS"; then
                      echo "$ASSET_DOWNLOAD_URL" >> No_link_provided_for_srmodule.txt
                    fi
                    ;;
                  "srmodule")
                    OUTPUT_DIR="./Modules/Shadowrocket/${REPO%%/*}"
                    ;;
                  "plugin")
                    OUTPUT_DIR="./Modules/Loon/${REPO%%/*}"
                    ;;
                  *)
                    echo "Skipping unsupported file type: $ASSET_NAME"
                    continue
                    ;;
                esac

                # Create directory and download file
                mkdir -p "$OUTPUT_DIR"
                OUTPUT_FILE="$OUTPUT_DIR/$ASSET_NAME"

                echo "Downloading: $ASSET_NAME"
                curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" "$ASSET_URL" -o "$OUTPUT_FILE.tmp"

                if [ ! -f "$OUTPUT_FILE.tmp" ]; then
                  echo "Failed to download $ASSET_NAME"
                  continue
                fi

                # Compare checksums
                NEW_CHECKSUM=$(sha256sum "$OUTPUT_FILE.tmp" | awk '{ print $1 }')
                if [ -f "$OUTPUT_FILE" ]; then
                  EXISTING_CHECKSUM=$(sha256sum "$OUTPUT_FILE" | awk '{ print $1 }')
                  if [ "$NEW_CHECKSUM" = "$EXISTING_CHECKSUM" ]; then
                    echo "No changes in $ASSET_NAME"
                    rm "$OUTPUT_FILE.tmp"
                    continue
                  fi
                fi

                echo "Updating $ASSET_NAME"
                mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                UPDATED_FILES+=("$ASSET_NAME")
                ASSETS_CHANGED=true

              done <<< "$ASSETS"
            fi
          done < <(printf '%s\n' "${REPOS[@]}")

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV
          echo "UPDATED_FILES<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${UPDATED_FILES[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Convert sgmodule to srmodule for missing files
        run: |
          category="Jacob"
          encoded_category=$(echo "$category" | jq -sRr @uri)
          
          # Process each sgmodule link that needs conversion
          while read -r module_link; do
            # Extract author and filename
            author=$(echo "$module_link" | cut -d'/' -f4)
            filename_noext=$(basename "$module_link" | sed 's/\.sgmodule$//')
            encoded_filename=$(echo "$filename_noext" | jq -sRr @uri)

            # Build Shadowrocket URL
            Shadowrocket_url="http://localhost:9100/file/_start_/${module_link}/_end_/${encoded_filename}.sgmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"

            # Download converted file
            mkdir -p "Modules/Shadowrocket/$author"
            echo "Converting and downloading Shadowrocket file: $Shadowrocket_url"
            if curl -A "Surge Mac/2985" -L -o "Modules/Shadowrocket/$author/$filename_noext.srmodule" "$Shadowrocket_url"; then
              echo "Conversion successful for $filename_noext.srmodule"
              ASSETS_CHANGED=true
            else
              echo "Failed to convert $filename_noext.srmodule"
            fi
          done < No_link_provided_for_srmodule.txt

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV

      - name: Find and replace external JS resources
        continue-on-error: true
        run: |
          js_base_url="https://github.com/${GITHUB_REPOSITORY}/raw/main/Modules/JS"
          mkdir -p Modules/JS/NSRingo Modules/JS/BiliUniverse Modules/JS/DualSubs Modules/JS/VirgilClyne

          # Process all module files
          for module_file in $(find Modules/Surge Modules/Loon Modules/Shadowrocket \
                              -path "*/Beta/*" -prune -o \
                              -type f \( -name "*.sgmodule" -o -name "*.plugin" -o -name "*.srmodule" \) -print); do
            author=$(dirname "$module_file" | sed 's|^Modules/[^/]*/||')
            module_name=$(basename "$module_file" | sed 's/\.[^.]*$//')
            
            # Find and process JS links
            js_links=$(grep -v '#' "$module_file" | grep -oP 'https?://[^ ]+\.(json|js)' || echo "")
            
            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Modules/JS/$author/$module_name/$js_filename"
              github_js_url="$js_base_url/$author/$module_name/$js_filename"
              
              mkdir -p "$(dirname "$local_js_path")"
              
              if curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                echo "Replacing $js_link with $github_js_url in $module_file"
                sed -i "s|$js_link|$github_js_url|g" "$module_file"
                ASSETS_CHANGED=true
              else
                echo "Failed to download $js_link, skipping..."
              fi
            done
          done

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV

      - name: Modify sgmodule files
        run: |
          MODIFICATIONS_MADE=false
          for sgmodule_file in $(find Modules/Surge -path "*/Beta/*" -prune -o -type f -name "*.sgmodule" -print); do
            sed -i 's/,pre-matching//g' "$sgmodule_file"
            MODIFICATIONS_MADE=true
          done

          if [ "$MODIFICATIONS_MADE" = "true" ]; then
            ASSETS_CHANGED=true
          fi
          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV

      - name: Commit and push changes
        if: env.ASSETS_CHANGED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          git add Modules/*
          git add No_link_provided_for_srmodule.txt
          
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          
          git pull --rebase
          git commit -m "Synched assets at $DATE (UTC+8)"
          git push
