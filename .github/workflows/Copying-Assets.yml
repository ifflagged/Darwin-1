name: Mirror Release Assets

on:
  schedule:
    - cron: '7,30 * * * *'
  workflow_dispatch:  # Manual trigger option

jobs:
  Downloading_assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Write permission to repository content
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set repository lists
        run: |
          REPOS=(
            "NSRingo/WeatherKit"
            "NSRingo/GeoServices"
            "NSRingo/Siri"
            "NSRingo/TV"
            "NSRingo/News"
            "NSRingo/Testflight"
            "BiliUniverse/Enhanced"
            "BiliUniverse/Global"
            "BiliUniverse/Redirect"
            "BiliUniverse/ADBlock"
            "BiliUniverse/Roaming"
            "DualSubs/Universal"
            "DualSubs/YouTube"
            "DualSubs/Spotify"
            "DualSubs/Netflix"
            "DualSubs/AddOn"
          )
          echo "REPOS<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${REPOS[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat

      - name: Wait for Docker services to be ready
        run: |
          echo "Waiting for Docker services to be ready..."
          for i in {1..10}; do
            nc -z localhost 9100 && nc -z localhost 9101 && break
            sleep 10
          done

      - name: Install sha256sum (if not available)
        run: sudo apt-get install -y coreutils

      - name: Download assets from releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSETS_CHANGED=false
          UPDATED_FILES=()
          touch sgmodule_url.txt  # Initialize the file for sgmodule URLs

          while IFS= read -r REPO; do
            echo "Processing repository: $REPO"

            # Get the latest release info for each repo
            RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/latest")

            # Skip if no release found
            if [ -z "$RELEASE" ] || [ "$RELEASE" == "null" ] || [ "$(echo "$RELEASE" | jq -r '.message')" = "Not Found" ]; then
              echo "Release not found for $REPO, skipping."
              continue
            fi

            echo "Release data for $REPO:"
            echo "$RELEASE" | jq '.'

            ASSETS=$(echo "$RELEASE" | jq -c '.assets[]')

            # Process each asset
            while IFS= read -r ASSET; do
              ASSET_NAME=$(echo "$ASSET" | jq -r '.name')
              ASSET_URL=$(echo "$ASSET" | jq -r '.url')
              ASSET_SIZE=$(echo "$ASSET" | jq -r '.size')
              BROWSER_DOWNLOAD_URL=$(echo "$ASSET" | jq -r '.browser_download_url')

              echo "Found asset: $ASSET_NAME (Size: $ASSET_SIZE bytes)"

              EXTENSION="${ASSET_NAME##*.}"

              # Determine the correct output directory based on repo and extension
              if [[ "$REPO" == "NSRingo"* ]]; then
                if [ "$EXTENSION" = "sgmodule" ]; then
                  OUTPUT_DIR="./Modules/Surge/NSRingo"
                elif [ "$EXTENSION" = "plugin" ]; then
                  OUTPUT_DIR="./Modules/Loon/NSRingo"
                elif [ "$EXTENSION" = "srmodule" ]; then
                  OUTPUT_DIR="./Modules/Shadowrocket/NSRingo"
                else
                  echo "Skipping unsupported file type: $ASSET_NAME"
                  continue
                fi
              elif [[ "$REPO" == "BiliUniverse"* ]]; then
                if [ "$EXTENSION" = "sgmodule" ]; then
                  OUTPUT_DIR="./Modules/Surge/BiliUniverse"
                elif [ "$EXTENSION" = "plugin" ]; then
                  OUTPUT_DIR="./Modules/Loon/BiliUniverse"
                elif [ "$EXTENSION" = "srmodule" ]; then
                  OUTPUT_DIR="./Modules/Shadowrocket/BiliUniverse"
                else
                  echo "Skipping unsupported file type: $ASSET_NAME"
                  continue
                fi
              elif [[ "$REPO" == "DualSubs"* ]]; then
                if [ "$EXTENSION" = "sgmodule" ]; then
                  OUTPUT_DIR="./Modules/Surge/DualSubs"
                elif [ "$EXTENSION" = "plugin" ]; then
                  OUTPUT_DIR="./Modules/Loon/DualSubs"
                elif [ "$EXTENSION" = "srmodule" ]; then
                  OUTPUT_DIR="./Modules/Shadowrocket/DualSubs"
                else
                  echo "Skipping unsupported file type: $ASSET_NAME"
                  continue
                fi
              else
                echo "Skipping unsupported repository: $REPO"
                continue
              fi

              # Create the output directory
              mkdir -p "$OUTPUT_DIR"

              OUTPUT_FILE="$OUTPUT_DIR/$ASSET_NAME"

              # Download the asset
              echo "Downloading: $ASSET_NAME"
              curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" "$ASSET_URL" -o "$OUTPUT_FILE.tmp"

              if [ ! -f "$OUTPUT_FILE.tmp" ]; then
                echo "Failed to download $ASSET_NAME"
                continue
              fi

              # Check for changes using sha256sum
              NEW_CHECKSUM=$(sha256sum "$OUTPUT_FILE.tmp" | awk '{ print $1 }')
              echo "New checksum for $ASSET_NAME: $NEW_CHECKSUM"

              if [ -f "$OUTPUT_FILE" ]; then
                EXISTING_CHECKSUM=$(sha256sum "$OUTPUT_FILE" | awk '{ print $1 }')
                echo "Existing checksum for $ASSET_NAME: $EXISTING_CHECKSUM"

                if [ "$NEW_CHECKSUM" = "$EXISTING_CHECKSUM" ]; then
                  echo "No changes in $ASSET_NAME"
                  rm "$OUTPUT_FILE.tmp"
                else
                  echo "Updating $ASSET_NAME"
                  mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                  UPDATED_FILES+=("$ASSET_NAME")
                  ASSETS_CHANGED=true
                fi
              else
                echo "Adding new file $ASSET_NAME"
                mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                UPDATED_FILES+=("$ASSET_NAME")
                ASSETS_CHANGED=true
              fi

              # If it's a sgmodule and no srmodule exists, save the browser_download_url to sgmodule_url.txt
              if [[ "$EXTENSION" == "sgmodule" ]]; then
                srmodule_file="$OUTPUT_DIR/$(basename "$ASSET_NAME" .sgmodule).srmodule"
                if [ ! -f "$srmodule_file" ]; then
                  echo "No corresponding srmodule found for $ASSET_NAME, saving browser_download_url"
                  echo "$BROWSER_DOWNLOAD_URL" >> sgmodule_url.txt
                fi
              fi

            done <<< "$ASSETS"

          done < <(printf '%s\n' "${REPOS[@]}")

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV
          echo "UPDATED_FILES<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${UPDATED_FILES[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create unavailable modules
        run: |
          category="Jacob"
          encoded_category=$(echo "$category" | jq -sRr @uri)
          
          # Loop through saved browser_download_urls
          while read -r sgmodule_url; do
            Modules_name=$(basename "$sgmodule_url" .sgmodule)
            encoded_Modules_name=$(echo "$Modules_name" | jq -sRr @uri)
            Shadowrocket_url="http://localhost:9100/file/_start_/${sgmodule_url}/_end_/${encoded_Modules_name}.sgmodule?type=loon-plugin&target=shadowrocket-module&category=${encoded_category}&nore=true"
            curl -V -A "Surge Mac/2985" -L -o "Modules/Shadowrocket/$Modules_name.srmodule" "$Shadowrocket_url" || echo "Failed to download ${Modules_name}.srmodule"
          done < sgmodule_url.txt

      - name: Commit and push changes to main branch
        if: env.ASSETS_CHANGED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e  # Disable exit on error
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
      
          git add .
      
          COMMIT_MESSAGE="Synched assets at $DATE (UTC+8)"
      
          # Check if there are changes before committing
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "$COMMIT_MESSAGE"
            git push origin main
          fi

      - name: No changes detected
        if: env.ASSETS_CHANGED != 'true'
        run: echo "No changes detected. Workflow will exit without committing."
