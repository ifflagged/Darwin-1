name: Extract and Process Modules

on:
  schedule:
    - cron: '5,30,55 * * * *'
  workflow_dispatch:

jobs:
  Converting:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat

      - name: Wait for Docker services to be ready
        run: |
          echo "Waiting for Docker services to be ready..."
          for i in {1..10}; do
            nc -z localhost 9100 && nc -z localhost 9101 && break
            sleep 10
          done

      - name: Process Links, Download Files, and Replace JS Resources
        run: |
          category="Jacob"
          encoded_category=$(echo "$category" | jq -sRr @uri)
          js_base_url="https://github.com/${GITHUB_REPOSITORY}/raw/main/Modules/JS"
          # 处理每个链接
          while read -r module_link; do
            # 跳过注释行和空白行
            if [[ "$module_link" =~ ^\s*#.* ]] || [[ -z "${module_link// }" ]]; then
            continue
            fi

            # 直接将整行作为 module_link 来处理
            # 获取作者名（假设作者在 URL 中的第4部分）
            author=$(echo "$module_link" | cut -d'/' -f4)
            filename=$(basename "$module_link")
            filename_noext="${filename%.*}"
            encoded_filename=$(echo "$filename_noext" | jq -sRr @uri)

            # 创建文件夹
            echo "Creating directories for $author"
            mkdir -p Modules/{Surge,Loon,Shadowrocket}/$author/Beta
            mkdir -p Modules/JS/$author

            # 构建模块的 URL
            Surge_url="http://localhost:9100/file/_start_/${module_link}/_end_/${encoded_filename}.sgmodule?type=surge-module&target=surge-module&category=${encoded_category}&nore=true"
            Surge_Beta_url="http://localhost:9101/file/_start_/${module_link}/_end_/${encoded_filename}.sgmodule?type=surge-module&target=surge-module&category=${encoded_category}&nore=true"
            Loon_url="http://localhost:9100/file/_start_/${module_link}/_end_/${encoded_filename}.plugin?type=loon-plugin&target=loon-plugin&category=${encoded_category}&icon=Loon&nore=true"
            Loon_Beta_url="http://localhost:9101/file/_start_/${module_link}/_end_/${encoded_filename}.plugin?type=loon-plugin&target=loon-plugin&category=${encoded_category}&icon=Loon&nore=true"
            Shadowrocket_url="http://localhost:9100/file/_start_/${module_link}/_end_/${encoded_filename}.srmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"
            Shadowrocket_Beta_url="http://localhost:9101/file/_start_/${module_link}/_end_/${encoded_filename}.srmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"

            # 下载各模块文件
            echo "Downloading Surge file: $Surge_url"
            curl -A "Surge Mac/2985" -L -o "Modules/Surge/$author/$filename_noext.sgmodule" "$Surge_url" || echo "Failed to download $Surge_url"
            curl -A "Surge Mac/2985" -L -o "Modules/Surge/$author/Beta/$filename_noext.sgmodule" "$Surge_Beta_url" || echo "Failed to download $Surge_Beta_url"

            echo "Downloading Loon file: $Loon_url"
            curl -A "Surge Mac/2985" -L -o "Modules/Loon/$author/$filename_noext.plugin" "$Loon_url" || echo "Failed to download $Loon_url"
            curl -A "Surge Mac/2985" -L -o "Modules/Loon/$author/Beta/$filename_noext.plugin" "$Loon_Beta_url" || echo "Failed to download $Loon_Beta_url"

            echo "Downloading Shadowrocket file: $Shadowrocket_url"
            curl -A "Surge Mac/2985" -L -o "Modules/Shadowrocket/$author/$filename_noext.srmodule" "$Shadowrocket_url" || echo "Failed to download $Shadowrocket_url"
            curl -A "Surge Mac/2985" -L -o "Modules/Shadowrocket/$author/Beta/$filename_noext.srmodule" "$Shadowrocket_Beta_url" || echo "Failed to download $Shadowrocket_Beta_url"

            # 查找 .sgmodule 文件中的 .js 链接并下载
            sgmodule_file="Modules/Surge/$author/$filename_noext.sgmodule"
            echo "Processing $sgmodule_file for JS links"

            js_links=$(grep -oP 'https?://[^ ]+\.js' "$sgmodule_file" || echo "")

            # 如果没有找到 .js 链接，则跳过
            if [ -z "$js_links" ]; then
              echo "No JS links found in $sgmodule_file"
              continue
            fi

            # 下载和替换每个 JS 链接
            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Modules/JS/$author/$js_filename"
              # 确保目标目录存在
              mkdir -p "$(dirname "$local_js_path")"
              
              # 使用指定的 User-Agent 下载 .js 文件
              echo "Downloading $js_link to $local_js_path"
              if [ ! -f "$local_js_path" ] && curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                echo "Download successful for $js_link"
                
                # 替换 GitHub 仓库的路径
                github_js_url="$js_base_url/$author/$js_filename"
                echo "Replacing $js_link with $github_js_url in $sgmodule_file"

                # 替换 .sgmodule 文件中的 JS 链接
                sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"

                # 替换 Loon 和 Shadowrocket 文件中的 JS 链接
                for ext in plugin srmodule; do
                  other_file="Modules/${ext^}/$author/${filename_noext}.${ext}"
                  if [ -f "$other_file" ]; then
                    echo "Replacing $js_link with $github_js_url in $other_file"
                    sed -i "s|$js_link|$github_js_url|g" "$other_file"
                  fi
                done
              else
                echo "Failed to download $js_link, skipping..."
              fi
            done
          done < Links/Modules-Links.txt

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取当前日期，设置为北京时间 (UTC+8)
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
    
          # 添加所有更改
          git add Modules/*
    
          # 如果没有变化，跳过提交
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # 提交消息，包含动态的日期
            COMMIT_MESSAGE="Convert modules at $DATE (UTC+8)"
      
            # 确保仓库是最新的，避免冲突
            git stash
            git pull --rebase  # 同步远程仓库的最新更改
            git stash pop  # 恢复之前的更改
      
            # 再次添加文件，进行提交
            git add Modules/*
            git commit -m "$COMMIT_MESSAGE"
            git push
          fi
